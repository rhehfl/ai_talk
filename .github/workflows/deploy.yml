# .github/workflows/deploy.yml

name: Deploy to EC2 with GHCR

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./packages/back/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2에서 GHCR에 로그인
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # docker-compose.yml 파일 생성 또는 업데이트
            cat <<EOF > ~/docker-compose.yml
            version: '3.8'
            services:
              backend:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
                ports:
                  - '8080:8080'
                depends_on:
                  - redis
                environment:
                  - REDIS_URL=redis://redis:6379
                  - GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
              redis:
                image: 'redis:alpine'
                ports:
                  - '6379:6379'
                volumes:
                  - redis-data:/data
            volumes:
              redis-data:
            EOF

            # Docker Compose로 배포 (모든 명령어에 sudo 추가!)
            sudo docker compose -f ~/docker-compose.yml pull backend
            sudo docker compose -f ~/docker-compose.yml up -d --no-deps backend
            sudo docker image prune -f
