# .github/workflows/deploy.yml

name: Deploy to EC2 with GHCR

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./packages/back/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # 1. 로컬의 docker-compose.yml 파일을 EC2로 복사
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~"

      # 2. EC2에 접속하여 배포 (가장 확실한 권한 해결 포함)
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # --- 셸 환경 문제 해결을 위해 모든 명령을 새로운 로그인 셸에서 실행 ---
            sudo su - ubuntu -c "
              # 1. GHCR 로그인
              echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
              
              # 2. 복사된 docker-compose.yml을 배포용으로 수정
              # build: 부분을 image: 로 교체하고, 불필요한 volumes 제거
              sed -i 's|build:|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|' ~/docker-compose.yml
              sed -i '/context:/d' ~/docker-compose.yml
              sed -i '/dockerfile:/d' ~/docker-compose.yml
              sed -i '/- \.\/packages\/back:\/usr\/src\/app\/packages\/back/d' ~/docker-compose.yml
              sed -i '/- \/usr\/src\/app\/node_modules/d' ~/docker-compose.yml
              
              # 3. 배포에 필요한 환경변수 추가
              # GEMINI_API_KEY가 이미 파일에 있는지 확인하고 없다면 추가
              if ! grep -q 'GEMINI_API_KEY' ~/docker-compose.yml; then
                sed -i '/- REDIS_URL=redis:\/\/redis:6379/a \ \ \ \ \ \ - GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}' ~/docker-compose.yml
              fi

              # 4. Docker Compose로 배포 실행
              docker compose -f ~/docker-compose.yml pull backend
              docker compose -f ~/docker-compose.yml up -d
              docker image prune -f
            "
