# .github/workflows/deploy.yml

name: Deploy to EC2 with GHCR

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./packages/back/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1. 변수를 docker compose 명령어에 직접 전달합니다.
            #    이렇게 하면 변수가 사라지지 않고 정확하게 적용됩니다.
            IMAGE_URL=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            sudo docker compose -f ~/docker-compose.yml pull

            IMAGE_URL=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            sudo docker compose -f ~/docker-compose.yml up -d

            # 3. 불필요한 이미지를 정리합니다.
            sudo docker image prune -f
